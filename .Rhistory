names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with data in our outcome
data <- data[data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Helper functiont to process the num argument
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
## For each state, find the hospital of the given rank
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Return a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
rankall
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data=OCM
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data=OCM
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best
best(heart attack)
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "pneumonia")
best("MD", "heart attack")
data <-OCM
rankall <- function(outcome, num = "best") {
## Read outcome data
data <-OCM
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with data in our outcome
data <- data[data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Helper functiont to process the num argument
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
## For each state, find the hospital of the given rank
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Return a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rankall("pneumonia", "best"
)
rankall <- function(outcome, num = "best") {
data <-OCM
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
data <- data[data[outcome] != 'Not Available', ]
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
rankall("heart failure", "best")
library(Rcmdr)
install.packages("shiny")
library(shiny)
library("xlsx", lib.loc="~/R/win-library/3.1")
library("xlsxjars", lib.loc="~/R/win-library/3.1")
library("rJava", lib.loc="~/R/win-library/3.1")
library("Rcmdr", lib.loc="~/R/win-library/3.1")
inDL(x, as.logical(local), as.logical(now), ...)
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.1")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.1")
library("rJava", lib.loc="~/R/win-library/3.1")
download.file=(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv, destfile=./data)
my.doc <- xmlTreeParse(file=file,useInternal=TRUE)
library("httr", lib.loc="~/R/win-library/3.1")
library("jsonlite", lib.loc="~/R/win-library/3.1")
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("598c2699137b575103826f35a8c5a8661af91a26
","x-oauth-basic","basic"))\
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("598c2699137b575103826f35a8c5a8661af91a26
","x-oauth-basic","basic"))
BROWSE("http://www.telegrafi.com/")
BROWSE("https://mail.google.com/mail/u/0/#inbox")
fname <- "http://www.frontierweather.com/degreedays/StatePopulationWeightedWeatherData_Since2010.txt"
dd2 <- read.csv(fname, sep=",", header=T)
BROWSE("http://www.telegrafi.com/")
jsonStuff <-GET("https://api.github.com/users/jtleek/repos",authenticate("598c2699137b575103826f35a8c5a8661af91a26","x-oauth-basic","basic"))
cat(content(stuff, "text"), "\n")
q3x = unique(acs$AGEP)
q3a2 = sqldf("select distinct pwgtp1 from acs")
t = read.fwf("./data/getdata-wksst8110.for", widths=c(10,5,4,4,5,4,4,5,8,5,4,4), as.is = FALSE, skip=4)
head(t)
sum(t$V6)
q()
install.packages("RMySQL")
libmysqll.dll
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages(c("rscproxy","rcom"),repos="http://rcom.univie.ac.at/download",lib=.Library)
library("rcom", lib.loc="~/R/win-library/3.1")
detach("package:rscproxy", unload=TRUE)
library("rscproxy", lib.loc="~/R/win-library/3.1")
library(rcom)
comRegisterRegistry()
library(Rcmdr)
install.packages("RcmdrPlugin.mosaic")
library("RcmdrPlugin.mosaic", lib.loc="~/R/win-library/3.1")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
dplyr
function()
woiefc
install.packages("dplyr")
install.packages("RODBC)")
install.packages("RODBC")
library("RODBC", lib.loc="~/R/win-library/3.1")
bbdb <- odbcConnect("bbdb")
bbdb <- odbcConnect("bbdb")
bbdb <- odbcConnect("bbdb")
install.packages("DBI")
library("DBI", lib.loc="~/R/win-library/3.1")
install.packages("RMyQL")
install.packages("RMySQL")
> setwd("C:/Users/Albion/Desktop/PROJECT/UCI HAR Dataset")
> if(!file.exists("a")){file.create("a")}
[1] TRUE
> a="UCI HAR Dataset"
> > write.table(a, file = "a.txt")
Error: unexpected '>' in ">"
> feature_file <- paste(a, "/features.txt", sep = "")
> activity_labels_file <- paste(a, "/activity_labels.txt", sep = "")
> x_train_file <- paste(a, "/train/X_train.txt", sep = "")
> y_train_file <- paste(a, "/train/y_train.txt", sep = "")
> subject_train_file <- paste(a, "/train/subject_train.txt", sep = "")
> x_test_file <- paste(a, "/test/X_test.txt", sep = "")
> y_test_file <- paste(a, "/test/y_test.txt", sep = "")
> subject_test_file <- paste(a, "/test/subject_test.txt", sep = "")
> # Load raw data
>
> features <- read.table(feature_file, colClasses = c("character"))
> activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
> x_train <- read.table(x_train_file)
> y_train <- read.table(y_train_file)
> subject_train <- read.table(subject_train_file)
> x_test <- read.table(x_test_file)
> y_test <- read.table(y_test_file)
> subject_test <- read.table(subject_test_file)
> ##################################################################
setwd("C:/Users/Albion/Desktop/PROJECT/UCI HAR Dataset")
if(!file.exists("a")){file.create("a")}
a="UCI HAR Dataset"
write.table(a, file = "a.txt")
feature_file <- paste(a, "/features.txt", sep = "")
activity_labels_file <- paste(a, "/activity_labels.txt", sep = "")
x_train_file <- paste(a, "/train/X_train.txt", sep = "")
y_train_file <- paste(a, "/train/y_train.txt", sep = "")
subject_train_file <- paste(a, "/train/subject_train.txt", sep = "")
x_test_file <- paste(a, "/test/X_test.txt", sep = "")
y_test_file <- paste(a, "/test/y_test.txt", sep = "")
subject_test_file <- paste(a, "/test/subject_test.txt", sep = "")
# Load raw data
features <- read.table(feature_file, colClasses = c("character"))
activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
##################################################################
A<- cbind(cbind(x_train, subject_train), y_train)
B <- cbind(cbind(x_test, subject_test), y_test)
alldata <- rbind(A,B)
alldata_labels <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId"))[,2]
names(alldata) <- alldata_labels
alldata_mean_std <- alldata[,grepl("mean|std|Subject|ActivityId", names(alldata))]
alldata_mean_std <- join(alldata_mean_std, activity_labels, by = "ActivityId", match = "first")
alldata_mean_std <- alldata_mean_std [,-1]
# Remove parentheses
names(alldata_mean_std) <- gsub('\\(|\\)',"",names(alldata_mean_std), perl = TRUE)
# Make syntactically valid names
names(alldata_mean_std) <- make.names(names(alldata_mean_std))
# Make clearer names
names(alldata_mean_std) <- gsub('Acc',"Acceleration",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('GyroJerk',"AngularAcceleration",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Gyro',"AngularSpeed",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Mag',"Magnitude",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('^t',"TimeDomain.",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('^f',"FrequencyDomain.",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('\\.mean',".Mean",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('\\.std',".StandardDeviation",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Freq\\.',"Frequency.",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Freq$',"Frequency",names(alldata_mean_std))
tidydata= ddply(alldata_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(tidydata, file = " tidydata.txt")
library("plyr", lib.loc="~/R/win-library/3.1")
tidydata= ddply(alldata_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(tidydata, file = " tidydata.txt")
tidydata= ddply(alldata_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(tidydata, file = " tidydata.txt")
rm(list=ls())
setwd("C:/Users/Albion/Desktop/PROJECT/UCI HAR Dataset")
if(!file.exists("a")){file.create("a")}
a="UCI HAR Dataset"
write.table(a, file = "a.txt")
feature_file <- paste(a, "/features.txt", sep = "")
activity_labels_file <- paste(a, "/activity_labels.txt", sep = "")
x_train_file <- paste(a, "/train/X_train.txt", sep = "")
y_train_file <- paste(a, "/train/y_train.txt", sep = "")
subject_train_file <- paste(a, "/train/subject_train.txt", sep = "")
x_test_file <- paste(a, "/test/X_test.txt", sep = "")
y_test_file <- paste(a, "/test/y_test.txt", sep = "")
subject_test_file <- paste(a, "/test/subject_test.txt", sep = "")
# Load raw data
features <- read.table(feature_file, colClasses = c("character"))
activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
##################################################################
A<- cbind(cbind(x_train, subject_train), y_train)
B <- cbind(cbind(x_test, subject_test), y_test)
alldata <- rbind(A,B)
alldata_labels <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId"))[,2]
names(alldata) <- alldata_labels
alldata_mean_std <- alldata[,grepl("mean|std|Subject|ActivityId", names(alldata))]
alldata_mean_std <- join(alldata_mean_std, activity_labels, by = "ActivityId", match = "first")
alldata_mean_std <- alldata_mean_std [,-1]
# Remove parentheses
names(alldata_mean_std) <- gsub('\\(|\\)',"",names(alldata_mean_std), perl = TRUE)
# Make syntactically valid names
names(alldata_mean_std) <- make.names(names(alldata_mean_std))
# Make clearer names
names(alldata_mean_std) <- gsub('Acc',"Acceleration",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('GyroJerk',"AngularAcceleration",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Gyro',"AngularSpeed",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Mag',"Magnitude",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('^t',"TimeDomain.",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('^f',"FrequencyDomain.",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('\\.mean',".Mean",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('\\.std',".StandardDeviation",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Freq\\.',"Frequency.",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Freq$',"Frequency",names(alldata_mean_std))
tidydata= ddply(alldata_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(tidydata, file = " tidydata.txt")
#set working directory to the location where the UCI HAR Dataset was unzipped
##require(plyr)
setwd("C:/Users/Albion/Desktop/PROJECT/UCI HAR Dataset")
if(!file.exists("a")){file.create("a")}
a="UCI HAR Dataset"
write.table(a, file = "a.txt")
feature_file <- paste(a, "/features.txt", sep = "")
activity_labels_file <- paste(a, "/activity_labels.txt", sep = "")
x_train_file <- paste(a, "/train/X_train.txt", sep = "")
y_train_file <- paste(a, "/train/y_train.txt", sep = "")
subject_train_file <- paste(a, "/train/subject_train.txt", sep = "")
x_test_file <- paste(a, "/test/X_test.txt", sep = "")
y_test_file <- paste(a, "/test/y_test.txt", sep = "")
subject_test_file <- paste(a, "/test/subject_test.txt", sep = "")
# Load raw data
features <- read.table(feature_file, colClasses = c("character"))
activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
##################################################################
# Merge the finalData set
A<- cbind(cbind(x_train, subject_train), y_train)
B <- cbind(cbind(x_test, subject_test), y_test)
alldata <- rbind(A,B)
alldata_labels <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId"))[,2]
names(alldata) <- alldata_labels
# mean and standard deviation for each measurement.
alldata_mean_std <- alldata[,grepl("mean|std|Subject|ActivityId", names(alldata))]
#Name the activities in the data set
alldata_mean_std <- join(alldata_mean_std, activity_labels, by = "ActivityId", match = "first")
alldata_mean_std <- alldata_mean_std [,-1]
####################################################
# Cleaning up the variable names
##########################################
# Remove parentheses
names(alldata_mean_std) <- gsub('\\(|\\)',"",names(alldata_mean_std), perl = TRUE)
# Make syntactically valid names
names(alldata_mean_std) <- make.names(names(alldata_mean_std))
# Make clearer names
names(alldata_mean_std) <- gsub('Acc',"Acceleration",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('GyroJerk',"AngularAcceleration",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Gyro',"AngularSpeed",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Mag',"Magnitude",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('^t',"TimeDomain.",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('^f',"FrequencyDomain.",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('\\.mean',".Mean",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('\\.std',".StandardDeviation",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Freq\\.',"Frequency.",names(alldata_mean_std))
names(alldata_mean_std) <- gsub('Freq$',"Frequency",names(alldata_mean_std))
tidydata= ddply(alldata_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(tidydata, file = " tidydata.txt")
